/* AFE Firmware for smarthome devices, More info: https://afe.smartnydom.pl/ */

#include "AFE-Sensor-AS3935.h"

AFESensorAS3935::AFESensorAS3935(){};

boolean AFESensorAS3935::begin(uint8_t id) {
  AFEDataAccess Data;
  Data.getConfiguration(id,&configuration);
  I2CPORT I2C;
  Data.getConfiguration(&I2C);
  boolean _initialize = false;

#if AFE_FIRMWARE_API != AFE_FIRMWARE_API_DOMOTICZ
  if (strlen(configuration.mqtt.topic) > 0) {
    sprintf(mqttCommandTopic, "%s/cmd", configuration.mqtt.topic);
  } else {
    mqttCommandTopic[0] = AFE_EMPTY_STRING;
  }
#endif


#ifdef DEBUG
  Serial << endl << endl << F("----- AS3935: Initializing -----");
  Serial << endl << F("IRQ GPIO : ") << configuration.irqGPIO;
  Serial << endl << F("Auto Noise: ") << configuration.setNoiseFloorAutomatically;
  Serial << endl << F("Noise Level : ") << configuration.noiseFloor;
  Serial << endl << F("Watchdog Threshold : ") << configuration.watchdogThreshold;
  Serial << endl << F("Strike Rejection : ") << configuration.spikesRejectionLevel;
  Serial << endl
         << F("Min.strikes level : ")
         << configuration.minimumNumberOfLightningSpikes;
  Serial << endl << F("Indoor? : ") << configuration.indoor;
#if AFE_FIRMWARE_API == AFE_FIRMWARE_API_DOMOTICZ
  Serial << endl << F("IDX: ") << configuration.domoticz.idx;
#endif

#endif
  if (configuration.i2cAddress != 0) {
#ifdef DEBUG
    Serial << endl << F("Address: 0x") << _HEX(configuration.i2cAddress);
    Serial << endl << F("---------------------------------");

    Serial << endl << endl << F("INFO: Scanning I2C Port for a device");
#endif

    AFEI2CScanner I2CScanner;
    I2CScanner.begin();
    if (I2CScanner.scan(configuration.i2cAddress)) {

#ifdef DEBUG
      Serial << endl << F("INFO: Initializing IRQ GPIO");
#endif

      pinMode(configuration.irqGPIO, INPUT);

      Wire.begin(I2C.SDA, I2C.SCL);
      if (!AS3935Sensor.begin(configuration.i2cAddress, Wire)) {
#ifdef DEBUG
        Serial << endl << F("ERROR: AS3935 is not initialized");
#endif
        while (1)
          ;
      } else {
#ifdef DEBUG
        Serial << endl << F("INFO: AS3935 is initialized");
#endif
        AS3935Sensor.maskDisturber(true);

#ifdef DEBUG
        int maskVal = AS3935Sensor.readMaskDisturber();
        Serial << endl << F("INFO: Are disturbers being masked: ");
        if (maskVal == 1)
          Serial << F("YES");
        else if (maskVal == 0)
          Serial << F("NO");
#endif

#ifdef DEBUG
        int enviVal = AS3935Sensor.readIndoorOutdoor();
        Serial << endl << F("INFO: Current Sensor localisation: ");
        if (enviVal == INDOOR)
          Serial << F("Indoor");
        else if (enviVal == OUTDOOR)
          Serial << F("Outdoor");
        else
          Serial.print(enviVal, BIN);
#endif

        AS3935Sensor.setIndoorOutdoor(configuration.indoor ? INDOOR : OUTDOOR);

#ifdef DEBUG
        enviVal = AS3935Sensor.readIndoorOutdoor();
        Serial << endl << F("INFO: Setting to: ");
        if (enviVal == INDOOR)
          Serial << F("Indoor");
        else if (enviVal == OUTDOOR)
          Serial << F("Outdoor");
        else
          Serial.print(enviVal, BIN);
#endif

        if (!configuration.setNoiseFloorAutomatically) {
#ifdef DEBUG
          Serial << endl
                 << F("INFO: Current: Noise Level: ") << AS3935Sensor.readNoiseLevel();
#endif

          AS3935Sensor.setNoiseLevel(configuration.noiseFloor);
#ifdef DEBUG
          Serial << endl
                 << F("INFO: Setting to: ") << AS3935Sensor.readNoiseLevel();

#endif
        }
#ifdef DEBUG
        else {
          Serial << endl << F("INFO: Noise Level automatically managed");
        }
#endif

#ifdef DEBUG
        Serial << endl
              
               << F("INFO: Current Watchdog Threshold: ")
               << AS3935Sensor.readWatchdogThreshold();
#endif

        AS3935Sensor.watchdogThreshold(configuration.watchdogThreshold);
#ifdef DEBUG
        Serial << endl
               << F("INFO: Setting to: ")
               << AS3935Sensor.readWatchdogThreshold();
#endif

#ifdef DEBUG
        Serial << endl
               << F("INFO: CurrentSpike Rejection: ")
               << AS3935Sensor.readSpikeRejection();
#endif
        AS3935Sensor.spikeRejection(configuration.spikesRejectionLevel);
#ifdef DEBUG
        Serial << endl
               << F("INFO: Setting to: ") << AS3935Sensor.readSpikeRejection();
#endif

#ifdef DEBUG
        Serial << endl
               << F("INFO: Current number of strikes before interrupt is triggerd: ")
               << AS3935Sensor.readLightningThreshold();
#endif
        AS3935Sensor.lightningThreshold(
            configuration.minimumNumberOfLightningSpikes);
#ifdef DEBUG
        Serial << endl
               << F("INFO: Setting to: ")
               << AS3935Sensor.readLightningThreshold();
#endif
        _initialize = true;
      }
    }
#ifdef DEBUG
    else {
      Serial << endl
             << F("ERROR: Device not found under I2C Address: 0x")
             << _HEX(configuration.i2cAddress);
    }
#endif
  }
#ifdef DEBUG
  else {
    Serial << endl << F("ERROR: Address not set");
  }
#endif


  return _initialize;
}

void AFESensorAS3935::interruptionReported() {
  ready = true;
  distance = AFE_CONFIG_HARDWARE_AS3935_DEFAULT_UNKNOWN_DISTANCE;

#ifdef DEBUG
  Serial << endl << F("INFO: AS3935, Reading event type ");
#endif
  eventType = AS3935Sensor.readInterruptReg();
  switch (eventType) {
  case NOISE_TO_HIGH:
#ifdef DEBUG
    Serial << F("NOISE");
#endif
    if (configuration.setNoiseFloorAutomatically) {
      increaseNoiseLevel();
    }
    break;
  case DISTURBER_DETECT:
#ifdef DEBUG
    Serial << F("DISTURBER");
#endif
    break;
  case LIGHTNING:
    distance = AS3935Sensor.distanceToStorm();
#ifdef DEBUG
    Serial << F("STRIKE");
    Serial << endl << F("INFO: AS3935: Distance: ") << distance;
#endif
    break;
  default:
    ready = false;
#ifdef DEBUG
    Serial << F("?") << endl << F("WARN: AS3935: Unknown interruption!");
#endif
  }
}

boolean AFESensorAS3935::strikeDetected() {


 if(digitalRead(configuration.irqGPIO) == HIGH){
 
#ifdef DEBUG
    Serial << endl << F("INFO: AS3935: Interuption");
#endif

 }




  
  if (ready) {
    ready = false;
    return true;
  } else {
    return false;
  }
}

void AFESensorAS3935::getJSON(char *json) {
  if (eventType == LIGHTNING) {
    sprintf(json,
            "{\"event\":{\"type\":\"lightning "
            "strike\",\"distance\":%d,\"unit\":\"%s\"}}",
            distance, configuration.unit == AFE_DISTANCE_KM ? "km" : "mil");
  } else if (eventType == NOISE_TO_HIGH) {
    sprintf(json, "{\"event\":{\"type\":\"noise\"}}");
  } else if (eventType == NOISE_TO_HIGH) {
    sprintf(json, "{\"event\":{\"type\":\"disruption\"}}");
  } else {
    sprintf(json, "{\"event\":{\"type\":\"unknown\"}}");
  }
}

void AFESensorAS3935::increaseNoiseLevel() {
  int level = AS3935Sensor.readNoiseLevel() + 1;
  if (level <= AFE_CONFIG_HARDWARE_AS3935_DEFAULT_MAX_NOISE_FLOOR) {
    AS3935Sensor.setNoiseLevel(level);
#ifdef DEBUG
    Serial << endl << F("AS3935: Noise level has been increased to: ") << level;
  } else {
    Serial << endl
           << F("AS3935: Warning: Noise level has NOT been increased. It's "
              "already at its MAX");
#endif
  }
}
